spring.application.name=portfolio_project
server.port=8080

logging.level.org.springframework=info
logging.level.com.example=TRACE

# PostgreSQL ë°ì´í°ë² ì´ì¤ ì¤ì
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA 설정
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# spring.jpa.database-platform 설정을 PostgreSQL로 변경
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# DB ì ë³´ ì¤ì 
spring.profiles.include=DB-KEY

#키 파일의 경로를 적어주면 스프링 부트는 키 파일의 내용을 바탕으로 stroage 변수에 자동으로 의존성을 부여
#spring.cloud.gcp.storage.credentials.location=${GCS_KEY}
spring.cloud.gcp.storage.project-id=${PROJECT_ID}
spring.cloud.gcp.storage.bucket=${BUCKET}

spring.servlet.multipart.max-file-size=30MB
spring.servlet.multipart.max-request-size=30MB

#spring.jpa.properties.hibernate.jdbc.use_get_generated_keys=false

spring.datasource.hikari.maximum-pool-size=10
spring.jpa.properties.hibernate.default_batch_fetch_size=30
spring.datasource.hikari.data-source-properties.cachePrepStmts=true
spring.datasource.hikari.data-source-properties.prepStmtCacheSize=250
spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=2048
spring.datasource.hikari.data-source-properties.useServerPrepStmts=false


## 레디스 설정
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=11978
spring.data.redis.password=${REDIS_PASSWORD}
spring.cache.type=redis
# TTL 설정 (5분)
#spring.cache.redis.time-to-live=300000 

## 시큐리티 계정 설정
#spring.security.user.name=user
#spring.security.user.password=1111

spring.jvm.heap=-Xmx512m -Xms256m

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
